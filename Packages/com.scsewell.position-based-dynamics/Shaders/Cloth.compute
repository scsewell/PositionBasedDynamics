#include "HLSLSupport.cginc"
#include "ClothCore.hlsl"

//#pragma use_dxc
//#pragma enable_d3d11_debug_symbols

#pragma kernel CSMain

// TODO: decrease size? would need to use global memory to share results,
// or ensure groups are entirely separate chunks of verts/tris (how to handle overlap?)
#define THREAD_GROUP_SIZE       1024
#define SHARED_MEMORY_SIZE      ((32 * 1024) / 4)
#define SHARED_PARTICLES_COUNT  (SHARED_MEMORY_SIZE / 6)

groupshared float3 gs_CurrPositions[SHARED_PARTICLES_COUNT];
groupshared float3 gs_PrevPositions[SHARED_PARTICLES_COUNT];

void StoreCurrPosition(uint index, float3 position, float invMass)
{
    if (index < SHARED_PARTICLES_COUNT)
    {
        gs_CurrPositions[index] = asfloat((asuint(position) & ~0x1) | uint(invMass));
    }
}

void StorePrevPosition(uint index, float3 position)
{
    if (index < SHARED_PARTICLES_COUNT)
    {
       	gs_PrevPositions[index] = position;
    }
}

float3 LoadCurrPosition(uint index, out float invMass)
{
	float3 position = gs_CurrPositions[index];
	invMass = asuint(position) & 0x1;
    return position;
}

float3 LoadCurrPosition(uint index)
{
	float invMass;
    return LoadCurrPosition(index, invMass);
}

float3 LoadPrevPosition(uint index)
{
    return gs_PrevPositions[index];
}

void LoadParicle(uint index, out NeighbourFan fan, out float invMass, out float3 currPos, out float3 prevPos)
{
	fan = LoadNeighbourFan(index);
    invMass = _InverseMasses[index];
    currPos = _CurrentPositions[index].xyz;
    prevPos = _PreviousPositions[index].xyz;
}

void StoreParticle(uint index, float3 currPos, float3 prevPos)
{
    if (index < _ParticleCount)
    {
        _CurrentPositions[index].xyz = currPos;
        _PreviousPositions[index].xyz = prevPos;
    }
}

void StoreVertex(uint index, float3 position, float3 normal)
{
    uint byteAddress = 3 * 4 * index;

    if (index < _ParticleCount)
    {
    	_MeshPositions.Store3(byteAddress, asuint(position));
    	_MeshNormals.Store3(byteAddress, asuint(normal));
	}
}

void Integrate(inout float3 currPos, inout float3 prevPos, float invMass)
{
    float3 velocity = currPos - prevPos;
    float3 accelration = _Gravity * _SubStepDeltaTime * _SubStepDeltaTime;
    
    prevPos = currPos;
    currPos += invMass * (velocity + accelration);
}

void Aerodynamics(NeighbourFan fan, inout float3 currPos, float3 prevPos, float invMass)
{
    UNITY_UNROLL
    for (uint i1 = 0; i1 < MAX_TRIS_PER_PARTICLE; i1++)
    {
        if ((fan.indices[i1] & FILLED_FAN_BIT) == FILLED_FAN_BIT)
        {
			uint i2 = (i1 + 1) % MAX_TRIS_PER_PARTICLE;

            float3 c0 = currPos;
			float3 c1 = LoadCurrPosition(fan.indices[i1] & ~FILLED_FAN_BIT);
			float3 c2 = LoadCurrPosition(fan.indices[i2] & ~FILLED_FAN_BIT);

            float3 p0 = prevPos;
			float3 p1 = LoadPrevPosition(fan.indices[i1] & ~FILLED_FAN_BIT);
			float3 p2 = LoadPrevPosition(fan.indices[i2] & ~FILLED_FAN_BIT);

			float3 curr = (c0 + c1 + c2) / 3.0;
			float3 prev = (p0 + p1 + p2) / 3.0;
			float3 vAvg = curr - prev;

			float3 vRel = vAvg - (_WindVelocity * _SubStepDeltaTime);
			float vRel2 = dot(vRel, vRel);

			float3 c = cross(c1 - c0, c2 - c0);
			float doubleArea = length(c);
			float area = 0.5 * doubleArea;
			float3 n = dot(c, vRel) > 0.0 ? c : -c;
			float3 normal = doubleArea > 0.0 ? n / doubleArea : 0.0;

			// https://media.disneyanimation.com/uploads/production/publication_asset/115/asset/cloth_hair_wind.pdf
			float3 drag = (_DragCoefficient - _LiftCoefficient) * dot(vRel, normal) * vRel;
			float3 lift = _LiftCoefficient * vRel2 * normal;
			float3 impulse = 0.5 * _AirDensity * area * (drag + lift);

            currPos += invMass * impulse;
        }
    }
}

void SolveDistanceConstraints(uint threadID, uint localID, uint groupID)
{
    // Process constraints in batches where no two constraints in the same batch
    // affect the same particles. This avoids the need to write atomically.

    // todo: profile unroll, see if registr increase is a real problem
    [unroll(MAX_CONSTRAINT_BATCHES)]
    for (uint batch = 0; batch < _ConstraintBatchCount; batch++)
    {
        uint3 batchData = _ConstraintBatchData[batch].xyz;
        uint batchOffset = batchData.x;
        uint batchSize = batchData.y;
        float compliance = asfloat(batchData.z);
        
        DistanceConstraint constraint = LoadDistanceConstraint(localID, batchOffset);

        float w0, w1;
        float3 p0 = LoadCurrPosition(constraint.indices.x, w0);
        float3 p1 = LoadCurrPosition(constraint.indices.y, w1);
        
        float3 disp = p0 - p1;
        float len = length(disp);
        float3 dir = len > 0.0 ? disp / len : 0.0;
        
        float c = len - constraint.restLength;
        float alpha = compliance / (_SubStepDeltaTime * _SubStepDeltaTime);
        float w = w0 + w1;
        float s = -c / (w + alpha);
        
        p0 += dir * (s * w0);
        p1 -= dir * (s * w1);
        
        if (localID < batchSize)
        {
            StoreCurrPosition(constraint.indices.x, p0, w0);
            StoreCurrPosition(constraint.indices.y, p1, w1);
        }
        
        GroupMemoryBarrierWithGroupSync();
    }
}

float3 ComputeNormal(NeighbourFan fan, float3 currPos)
{
    float3 fanBlades[MAX_TRIS_PER_PARTICLE];

    UNITY_UNROLL
    for (uint i = 0; i < MAX_TRIS_PER_PARTICLE; i++)
    {
        fanBlades[i] = LoadCurrPosition(fan.indices[i] & ~FILLED_FAN_BIT) - currPos;
    }

    float3 normal = cross(fanBlades[0], fanBlades[1]);

    UNITY_UNROLL
    for (uint j1 = 1; j1 < MAX_TRIS_PER_PARTICLE; j1++)
    {
        if ((fan.indices[j1] & FILLED_FAN_BIT) == FILLED_FAN_BIT)
        {
			uint j2 = (j1 + 1) % MAX_TRIS_PER_PARTICLE;

            normal += cross(fanBlades[j1], fanBlades[j2]);
        }
    }

    return normalize(normal);
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void CSMain(uint threadID : SV_DispatchThreadID, uint localID : SV_GroupThreadID, uint groupID : SV_GroupID)
{
    uint i0 = (2 * localID) + 0;
    uint i1 = (2 * localID) + 1;
    
	NeighbourFan fan0, fan1;
    float invMass0, invMass1;
    float3 currPos0, currPos1;
    float3 prevPos0, prevPos1;

    LoadParicle(i0, fan0, invMass0, currPos0, prevPos0);
    LoadParicle(i1, fan1, invMass1, currPos1, prevPos1);

    for (uint i = 0; i < _SubStepCount; i++)
    {
        Integrate(currPos0, prevPos0, invMass0);
        Integrate(currPos1, prevPos1, invMass1);

        StorePrevPosition(i0, currPos0);
        StorePrevPosition(i1, currPos1);
        StoreCurrPosition(i0, currPos0, invMass0);
        StoreCurrPosition(i1, currPos1, invMass1);

        GroupMemoryBarrierWithGroupSync();

		Aerodynamics(fan0, currPos0, prevPos0, invMass0);
		Aerodynamics(fan1, currPos1, prevPos1, invMass1);

        GroupMemoryBarrierWithGroupSync();

        StoreCurrPosition(i0, currPos0, invMass0);
        StoreCurrPosition(i1, currPos1, invMass1);

        GroupMemoryBarrierWithGroupSync();

        SolveDistanceConstraints(threadID, localID, groupID);

        currPos0 = LoadCurrPosition(i0);
        currPos1 = LoadCurrPosition(i1);
    }

	float3 normal0 = ComputeNormal(fan0, currPos0);
	float3 normal1 = ComputeNormal(fan1, currPos1);

	StoreParticle(i0, currPos0, prevPos0);
	StoreParticle(i1, currPos1, prevPos1);

	StoreVertex(i0, currPos0, normal0);
	StoreVertex(i1, currPos1, normal1);
}
