#include "HLSLSupport.cginc"
#include "XpbdTypes.hlsl"

#pragma kernel CSMain

#define THREAD_GROUP_SIZE 64

uint _ConstraintCount;

StructuredBuffer<DistanceConstraint> _Constraints;
StructuredBuffer<float> _InverseMasses;

RWStructuredBuffer<float4> _Positions;

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void CSMain(uint tID : SV_DispatchThreadID, uint groupID : SV_GroupID)
{
    if (tID < _ConstraintCount)
    {
        DistanceConstraint constraint = _Constraints[tID];
    
        float w0 = _InverseMasses[constraint.index0];
        float w1 = _InverseMasses[constraint.index1];
    
        float w = w0 + w1;
    
        if (w == 0.0)
        {
            return;
        }
    
        float3 p0 = _Positions[constraint.index0].xyz;
        float3 p1 = _Positions[constraint.index1].xyz;
    
        float3 disp = p0 - p1;
        float len = length(disp);
    
        if (len == 0.0)
        {
            return;
        }
        
        float3 dir = disp / len;
        float c = len - constraint.restLength;
        float alpha = constraint.compliance / (_SubStepDeltaTime * _SubStepDeltaTime);
        float s = -c / (w + alpha);
        
        _Positions[constraint.index0].xyz = p0 + (dir * (s * w0));
        _Positions[constraint.index1].xyz = p1 + (dir * (-s * w1));
    }
}
